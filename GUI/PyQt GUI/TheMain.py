# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtWidgets#,QtCore, QtGui,  QtSerialPort
from PyQt6.QtSerialPort import QSerialPortInfo #,QSerialPort
#from pyqtgraph import PlotWidget
from PyQt6.QtWidgets import  QMainWindow #,QFileDialog, QWidget
#import serial
import sys

from untitled import Ui_MainWindow

import Page000, Page101, Page103, Page301
import Spikeling_graph
#import icons_rc

        
BaudRate = 115200
portList = []
ports = QSerialPortInfo().availablePorts()
for port in ports:
        if sys.platform == "linux" or sys.platform == "linux2":
            portList.append(port.systemLocation())
            print(port.systemLocation())
        else:
            portList.append(port.portName())
            


class MainWindow:
        def __init__(self):
            self.main_window = QMainWindow()
            self.ui = Ui_MainWindow()
            self.ui.setupUi(self.main_window)


        # Home Page - page000
            # Display Home page on start up
            self.ui.mainbody_stackedWidget.setCurrentWidget(self.ui.page_000)
            # Display Home page when menu button is clicked
            self.ui.menu_pushButton.clicked.connect(lambda: Page000.show_page000(self))


        # Spikeling Page - page101
            # Display page101 when spikeling button is clicked
            self.ui.Neuron_pushButton.clicked.connect(lambda: Page101.Spikeling101.ShowPage(self))

            # Update connected port COM and append them
            for i in range(len(ports)):
                self.ui.Spikeling_SelectPortComboBox.addItem("")
            for i in range(len(ports)):
                self.ui.Spikeling_SelectPortComboBox.setItemText(i + 1, str(portList[i]))
            # COM port connections
            self.ui.Spikeling_SelectPortComboBox.currentIndexChanged.connect(lambda: Page101.Spikeling101.ChangePort(self))

            # Start reading serial when connect button is clicked and plot the reading on the oscilloscope
            self.ui.Spikeling_ConnectButton.clicked.connect(lambda: Spikeling_graph.ReadSerial(self))

            # Create buffer data record folder
            self.ui.Spikeling_FolderNameLabel = QtWidgets.QLabel(self.ui.Spikeling_DataRecording_box)
            self.ui.Spikeling_FolderNameLabel.setObjectName("FolderNameLabel")

            # Data Recording
            self.ui.Spikeling_DataRecording_RecordFolder_value.textChanged.connect(lambda: Page101.Spikeling101.RecordFolderText(self))
            self.ui.Spikeling_DataRecording_RecordFolderDir_pushButton.clicked.connect(lambda: Page101.Spikeling101.BrowseRecordFolder(self.ui))
            self.ui.Spikeling_DataRecording_Record_pushButton.setCheckable(True)
            self.ui.Spikeling_DataRecording_Record_pushButton.clicked.connect(lambda: Page101.Spikeling101.RecordButton(self))

            # Stimulation parameters
            self.ui.Spikeling_StimFre_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateStimFre(self))
            self.ui.Spikeling_StimFre_slider.valueChanged.connect(lambda: Page101.Spikeling101.GetStimFreSliderValue(self))
            self.ui.Spikeling_StimStr_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateStimStr(self))
            self.ui.Spikeling_StimStrSlider.valueChanged.connect(lambda: Page101.Spikeling101.GetStimStrSliderValue(self))
            self.ui.Spikeling_CustomStimulus_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateCustomStimulus(self))
            self.ui.Spikeling_PR_PhotoGain_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivatePhotoGain(self))
            self.ui.Spikeling_PR_Decay_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivatePRDecay(self))
            self.ui.Spikeling_PR_Recovery_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivatePRRecovery(self))

            # Neuron parameters
            self.ui.Spikeling_Vm_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateMembranePotential(self))
            self.ui.Spikeling_Noise_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateNoiseLevel(self))
            self.ui.Spikeling_Synapse1_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateSynapticGain1(self))
            self.ui.Spikeling_Synapse1_Decay_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateSynapse1Decay(self))
            self.ui.Spikeling_Synapse2_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateSynapticGain2(self))
            self.ui.Spikeling_Synapse2_Decay_checkBox.toggled.connect(lambda: Page101.Spikeling101.ActivateSynapse2Decay(self))

        # Spikeling Data Analysis - page 103
            # Display page103 when data analysis button is clicked
            self.ui.NeuronDataAnalysis_pushButton.clicked.connect(lambda: Page103.Spikeling103.ShowPage(self))
            self.ui.DataAnalysis_LoadData_pushButton.clicked.connect(lambda: Page103.Spikeling103.LoadData(self.ui))
            self.ui.DataAnalysis_LoadData_Display_pushButton.clicked.connect(lambda: Page103.Spikeling103.DisplayRawData(self))

            self.ui.DataAnalysis_Spike_Display_pushButton.clicked.connect(lambda: Page103.Spikeling103.FindSpike(self))
            self.ui.DataAnalysis_Neuron0Vm_pushButton.clicked.connect(lambda: self.ui.DataAnalysis_Display_StackedWidget.setCurrentWidget(self.ui.page_103_2_1))
            self.ui.DataAnalysis_Neuron1Vm_pushButton.clicked.connect(lambda: self.ui.DataAnalysis_Display_StackedWidget.setCurrentWidget(self.ui.page_103_2_2))
            self.ui.DataAnalysis_Neuron2Vm_pushButton.clicked.connect(lambda: self.ui.DataAnalysis_Display_StackedWidget.setCurrentWidget(self.ui.page_103_2_3))

            self.ui.DataAnalysis_Average_Display_pushButton.clicked.connect(lambda: Page103.Spikeling103.AverageTraces(self))


        # Neuron Generator Page - page301
            # Display page301 when neuron button is clicked
            self.ui.NeuronGenerator_pushButton.clicked.connect(lambda: Page301.show_page301(self))
            # Draw Neuron model based on parameters a, b, c & d
            self.ui.DisplayNeuronPushButton.clicked.connect(lambda: Page301.NeuronGenerator.DrawNeuron(self))






        def show(self):
            self.main_window.show()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec())

